{:ns "grimoire.api.web.read", :name "do-thing-req", :file "grimoire/api/web/read.clj", :type :fn, :src "(defn do-thing-req\n  \"λ [Cfg → Op → (λ [p → String] → c) → p ⊆ Thing] → Either[Success[Seq[c]], Failure[String]]\n\n  Helper, does a data request against the Grimoire web API as specified by the\n  config and op, running the request results through the constructor to yield a\n  seq of Things as constructed from the pair (parent, (:name result)).\"\n  [config op ctor parent]\n  (let [?res (do-data-req config parent op)]\n    (if (succeed? ?res)\n      (->> ?res result\n           (map (comp (partial ctor parent) :name))\n           succeed)\n      ?res)))", :column 1, :line 73, :arglists ([config op ctor parent]), :doc "λ [Cfg → Op → (λ [p → String] → c) → p ⊆ Thing] → Either[Success[Seq[c]], Failure[String]]\n\n  Helper, does a data request against the Grimoire web API as specified by the\n  config and op, running the request results through the constructor to yield a\n  seq of Things as constructed from the pair (parent, (:name result))."}