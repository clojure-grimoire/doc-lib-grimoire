{:ns "grimoire.api", :name "resolve-short-string", :file "grimoire/api.clj", :type :fn, :src "(defn resolve-short-string\n  \"Succeeds with a result Thing, mapping a short string as generated by\n  clj::grimoire.things/thing->short-string back to a thing via\n  clj::grimoire.api/search.\"\n\n  [config s]\n  {:pre [(string? s)]}\n  (if-let [res (t/parse-short-string s)]\n    (match [res]\n      ;; Case of a def\n      ;;----------------------------------------\n      [([:def gid art v plat ns name] :seq)]\n      (let [?res (search config res)]\n        (if (e/succeed? ?res)\n          (e/succeed (first (e/result ?res)))\n          ?res))\n      \n      ;; Case of a ns\n      ;;----------------------------------------\n      [([:ns  gid art v plat ns] :seq)]\n      (let [?res (search config res)]\n        (if (e/succeed? ?res)\n          (e/succeed (first (e/result ?res)))\n          ?res))\n\n      ;; Default case\n      ;;----------------------------------------\n      [_]\n      (e/fail \"Unknown parse-short-string result!\"))\n    (e/fail \"Could not parse string!\")))", :column 1, :line 563, :arglists ([config s]), :doc "Succeeds with a result Thing, mapping a short string as generated by\n  clj::grimoire.things/thing->short-string back to a thing via\n  clj::grimoire.api/search."}