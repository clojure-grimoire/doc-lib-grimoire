{:ns "grimoire.things", :name "thing->relative-path", :file "grimoire/things.clj", :type :fn, :src "(defn thing->relative-path\n  \"Function from a Thing type and a Thing instance which walks the instance's\n  parent tree until it reaches an instance of the given Thing type. Returns a\n  string representing the relative path of the given Thing instance with respect\n  to the parent Thing type.\"\n  [t thing]\n  {:pre [(thing? thing)\n         (v/TagDescriptor? t)]}\n  (->> thing\n       (iterate thing->parent)\n       (take-while identity)\n       (take-while #(not= (v/tag %1) (:tag t)))\n       (reverse)\n       (map thing->name)\n       (interpose \"/\")\n       (apply str)))", :column 1, :line 247, :arglists ([t thing]), :doc "Function from a Thing type and a Thing instance which walks the instance's\n  parent tree until it reaches an instance of the given Thing type. Returns a\n  string representing the relative path of the given Thing instance with respect\n  to the parent Thing type."}