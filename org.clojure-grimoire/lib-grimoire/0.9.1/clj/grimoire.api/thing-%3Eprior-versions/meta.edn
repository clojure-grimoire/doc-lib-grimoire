{:ns "grimoire.api", :name "thing->prior-versions", :file "grimoire/api.clj", :type :fn, :src "(defn thing->prior-versions\n  \"Succeeds with a result Seq[Thing] representing the argument Thing at earlier\n  or equal versions sorted in decending order. Note that this op only supports\n  Versions, Namespaces and Defs. Artifacts and Groups do not have versions, and\n  will give Failures. The Version component of a Note or an Example is naming,\n  and versions of these Things are not guranteed to be interchangable. Trying to\n  get a prior version with a\n\n  Fails if a nested Failure is encountered.\"\n\n  [config thing]\n  {:pre [(t/versioned? thing)\n         (not (:handle thing))]}\n  (let [thing    (t/ensure-thing thing)\n        currentv (t/thing->version thing)               ; version handle\n        current  (-> currentv :name util/normalize-version)\n        added    (-> (read-meta config thing)\n                     e/result\n                     (get :added \"0.0.0\")\n                     util/normalize-version)\n        unv-path (t/thing->relative-path t/version thing)\n        versions (e/result (list-versions config (:parent currentv)))]\n    (e/succeed\n     (for [v     versions\n           :when (<= 0 (semver/version-compare (:name v) added))\n           :when (>= 0 (semver/version-compare (:name v) current))]\n       ;; FIXME: this could be a direct constructor given an\n       ;; appropriate vehicle for doing so since the type is directed\n       ;; and single but may not generally make sense if this is not\n       ;; the case.\n       (t/path->thing (str (t/thing->path v) \"/\" unv-path))))))", :column 1, :line 247, :arglists ([config thing]), :doc "Succeeds with a result Seq[Thing] representing the argument Thing at earlier\n  or equal versions sorted in decending order. Note that this op only supports\n  Versions, Namespaces and Defs. Artifacts and Groups do not have versions, and\n  will give Failures. The Version component of a Note or an Example is naming,\n  and versions of these Things are not guranteed to be interchangable. Trying to\n  get a prior version with a\n\n  Fails if a nested Failure is encountered."}